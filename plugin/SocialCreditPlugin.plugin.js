//META{"name":"UserRatingPlugin", "author":"YourName", "version":"1.1.0", "description":"Allows rating users via message context menu and sending data to a local server. Configure your API key in settings."}*//

module.exports = class UserRatingPlugin {
  // --- Plugin Meta Data ---
  getName() { return "User Rating Plugin"; }
  getDescription() { return "Allows rating users via context menu and sending data to a local server. Configure your API key in plugin settings."; }
  getVersion() { return "1.1.0"; }
  getAuthor() { return "Generated by AI (Review Carefully)"; }

  // --- Configuration ---
  API_ENDPOINT = "http://localhost:8000/plugin/ratings";
  settings = {
      apiKey: "" // Default empty API key
  };

  contextMenuCallback = null;

  // --- Lifecycle Methods ---
  start() {
      if (!global.BdApi) {
          console.error("[UserRatingPlugin] BdApi not found. BetterDiscord might not be loaded correctly.");
          // Cannot use BdApi.UI.showToast here if BdApi itself is missing.
          return;
      }
      console.log(`[UserRatingPlugin] ${this.getName()} version ${this.getVersion()} has started.`);
      this.loadSettings();
      BdApi.UI.showToast(`${this.getName()} Started! Please configure your API key in settings if you haven't.`, { type: "info", timeout: 5000 });
      this.patchMessageContextMenu();
  }

  stop() {
      if (this.contextMenuCallback && global.BdApi && BdApi.ContextMenu) {
          BdApi.ContextMenu.unpatch('message', this.contextMenuCallback);
          this.contextMenuCallback = null;
      }
      console.log(`[UserRatingPlugin] ${this.getName()} has stopped.`);
      if (global.BdApi) {
          BdApi.UI.showToast(`${this.getName()} Stopped!`, { type: "info", timeout: 3000 });
      }
  }

  // --- Settings Management ---
  loadSettings() {
      this.settings = BdApi.Data.load(this.getName(), "settings") || { apiKey: "" };
      // Ensure apiKey is always a string, even if it was saved as null/undefined somehow
      if (typeof this.settings.apiKey !== 'string') {
          this.settings.apiKey = "";
      }
  }

  saveSettings() {
      BdApi.Data.save(this.getName(), "settings", this.settings);
  }

  /**
   * Creates the settings panel HTML.
   * This is called by BetterDiscord when the user clicks the settings icon for the plugin.
   */
  getSettingsPanel() {
      // Create the main container for the settings panel
      const panel = document.createElement("div");
      panel.className = "user-rating-plugin-settings";
      panel.style.padding = "20px";
      panel.style.color = "var(--text-normal)"; // Use Discord's text color variable

      // Title for the settings panel
      const title = document.createElement("h3");
      title.textContent = "User Rating Plugin Settings";
      title.style.marginBottom = "15px";
      title.style.borderBottom = "1px solid var(--background-modifier-accent)";
      title.style.paddingBottom = "10px";
      panel.appendChild(title);

      // API Key Input Field Label
      const apiKeyLabel = document.createElement("label");
      apiKeyLabel.textContent = "Plugin API Key:";
      apiKeyLabel.style.display = "block";
      apiKeyLabel.style.marginBottom = "5px";
      apiKeyLabel.style.fontWeight = "bold";
      panel.appendChild(apiKeyLabel);

      // API Key Input Field
      const apiKeyInput = document.createElement("input");
      apiKeyInput.type = "password"; // Use password type to obscure the key
      apiKeyInput.value = this.settings.apiKey;
      apiKeyInput.placeholder = "Enter your API Key";
      apiKeyInput.style.width = "100%";
      apiKeyInput.style.padding = "10px";
      apiKeyInput.style.marginBottom = "15px";
      apiKeyInput.style.boxSizing = "border-box";
      apiKeyInput.style.backgroundColor = "var(--input-background)";
      apiKeyInput.style.color = "var(--text-input-placeholder)"; // Or var(--text-normal)
      apiKeyInput.style.border = "1px solid var(--input-background)";
      apiKeyInput.style.borderRadius = "3px";
      panel.appendChild(apiKeyInput);

      // Info text for the API key
      const apiKeyInfo = document.createElement("p");
      apiKeyInfo.textContent = "This API key is used to authenticate with your backend server. It's stored locally.";
      apiKeyInfo.style.fontSize = "0.9em";
      apiKeyInfo.style.opacity = "0.7";
      apiKeyInfo.style.marginBottom = "20px";
      panel.appendChild(apiKeyInfo);

      // Save Button
      const saveButton = document.createElement("button");
      saveButton.textContent = "Save Settings";
      saveButton.style.padding = "10px 15px";
      saveButton.style.backgroundColor = "var(--button-positive-background)"; // Discord's green button color
      saveButton.style.color = "var(--text-normal)"; // Usually white text on these buttons
      saveButton.style.border = "none";
      saveButton.style.borderRadius = "3px";
      saveButton.style.cursor = "pointer";

      saveButton.onclick = () => {
          this.settings.apiKey = apiKeyInput.value;
          this.saveSettings();
          BdApi.UI.showToast("Settings saved!", { type: "success" });
      };
      panel.appendChild(saveButton);

      return panel;
  }


  // --- Main Plugin Logic ---
  patchMessageContextMenu() {
      if (!BdApi.ContextMenu || !BdApi.ContextMenu.patch || !BdApi.ContextMenu.buildItem || !BdApi.ContextMenu.buildItemGroup) {
          BdApi.UI.showToast("ContextMenu API not available for User Rating Plugin.", { type: "error" });
          console.error("[UserRatingPlugin] ContextMenu API parts not available.");
          return;
      }

      this.contextMenuCallback = (res, props) => {
          const { message } = props;
          if (!message || !message.author || message.author.bot || !message.id || !message.guild_id) {
              return res;
          }

          const menuItem = BdApi.ContextMenu.buildItem({
              label: "Rate User (Plugin)",
              action: () => this.handleRateUserAction(message)
          });
          const newItemGroup = BdApi.ContextMenu.buildItemGroup([menuItem]);

          if (res && res.props && res.props.children) {
              if (Array.isArray(res.props.children)) {
                  res.props.children.push(newItemGroup);
              } else {
                  res.props.children = [res.props.children, newItemGroup];
              }
          } else if (res && res.props) {
              res.props.children = [newItemGroup];
          }
          return res;
      };
      BdApi.ContextMenu.patch('message', this.contextMenuCallback);
  }

  handleRateUserAction(message) {
      if (!this.settings.apiKey) {
          BdApi.UI.showToast("API Key not set. Please configure it in the User Rating Plugin settings.", { type: "error", timeout: 7000 });
          console.error("[UserRatingPlugin] API Key is not set.");
          // Optionally, open the settings panel directly:
          // BdApi.UI.openSettingsModal(this.getName()); // This might not work directly depending on BD version/context
          return;
      }

      const UserStore = BdApi.Webpack.getModule(BdApi.Webpack.Filters.byProps("getCurrentUser", "getUser"));
      const currentUser = UserStore ? UserStore.getCurrentUser() : null;

      if (!currentUser) {
          BdApi.UI.showToast("Could not get current user information.", { type: "error" });
          console.error("[UserRatingPlugin] Failed to get current user.");
          return;
      }

      const ratingData = {
          acting_user_id: currentUser.id,
          target_user_id: message.author.id,
          server_id: message.guild_id,
          message_id: message.id
      };
      this.showRatingModal(ratingData);
  }

  showRatingModal(ratingData) {
      const React = BdApi.React;
      let currentScoreDelta = 0;

      const ScoreInputComponent = ({ initialValue, onChange }) => {
          const [score, setScore] = React.useState(initialValue);
          const handleChange = (event) => {
              const value = parseInt(event.target.value, 10);
              const newScore = isNaN(value) ? 0 : value;
              setScore(newScore);
              if (onChange) onChange(newScore);
          };
          return React.createElement("div", { className: "userRatingModalContent", style: { padding: "20px", color: "var(--text-normal)" } },
              React.createElement("h3", { style: { marginBottom: "15px", textAlign: "center", fontWeight: "bold", color: "var(--header-primary)" } }, "Submit User Rating"),
              React.createElement("p", { style: { marginBottom: "5px", fontSize: "0.9em" } }, `Target User ID: ${ratingData.target_user_id}`),
              React.createElement("p", { style: { marginBottom: "15px", fontSize: "0.9em" } }, `Message ID: ${ratingData.message_id}`),
              React.createElement("div", { style: { marginBottom: "20px", display: "flex", alignItems: "center", justifyContent: "space-between" } },
                  React.createElement("label", { htmlFor: "scoreDeltaInputModal", style: { marginRight: "10px", fontWeight: "bold" } }, "Score Delta:"),
                  React.createElement("input", {
                      type: "number", id: "scoreDeltaInputModal", value: score, onChange: handleChange, autoFocus: true,
                      style: { width: "100px", padding: "8px", borderRadius: "3px", border: "1px solid var(--input-background)", backgroundColor: "var(--input-background)", color: "var(--text-normal)", textAlign: "center" }
                  })
              ),
              React.createElement("p", { style: { fontSize: "0.8em", marginTop: "10px", textAlign: "center", opacity: 0.7 } }, "Enter a positive or negative integer.")
          );
      };

      BdApi.UI.showModal("Rate User Action",
          React.createElement(ScoreInputComponent, { initialValue: currentScoreDelta, onChange: (newScore) => currentScoreDelta = newScore }),
          {
              danger: false, confirmText: "Submit Rating", cancelText: "Cancel",
              onConfirm: () => {
                  const payload = { ...ratingData, score_delta: currentScoreDelta };
                  this.submitRatingToServer(payload);
              }
          }
      );
  }

  async submitRatingToServer(payload) {
      if (!this.settings.apiKey) {
          BdApi.UI.showToast("API Key not configured. Cannot submit rating. Please set it in plugin settings.", { type: "error", timeout: 7000 });
          console.error("[UserRatingPlugin] Aborted submission: API Key is missing.");
          return;
      }

      try {
          const response = await fetch(this.API_ENDPOINT, {
              method: "POST",
              headers: {
                  "Content-Type": "application/json",
                  "X-Plugin-API-Key": this.settings.apiKey // Use the key from settings
              },
              body: JSON.stringify(payload)
          });

          if (response.status === 201) {
              BdApi.UI.showToast("Rating submitted successfully!", { type: "success" });
              console.log("[UserRatingPlugin] Rating submitted successfully:", payload);
          } else {
              const errorText = await response.text();
              BdApi.UI.showToast(`API Error: ${response.status} - ${errorText || response.statusText}`, { type: "error", timeout: 7000 });
              console.error("[UserRatingPlugin] API Error:", response.status, response.statusText, errorText, "Payload:", payload);
          }
      } catch (error) {
          BdApi.UI.showToast("Failed to send rating. Check console for details.", { type: "error" });
          console.error("[UserRatingPlugin] Network or other error submitting rating:", error, "Payload:", payload);
      }
  }
};
